Clear-Host

$nomDomaine = (Get-ADDomain).DistinguishedName
$chemin = "OU=GROUPES,OU=INFORMATIQUE,$nomDomaine"
$nomDNS = (Get-ADDomain).DnsRoot

$motDePasse = "AAAaaa111"
$mdp = ConvertTo-SecureString -AsPlainText $MotdePasse -Force

Get-ADGroup -Filter * `
            -SearchBase $chemin | Remove-ADGroup -Confirm:$false

$FUtilisateur = "E:\PRATIQUE_ETU.csv"
$ListeUtilisateur = Import-Csv -Path $FUtilisateur `
                                -Delimiter ";"

Foreach ($Ligne in $ListeUtilisateur)
{
    #Creation de 1 user
    #Ajout des groupes a ce user
    #donner dossier personnel
    #donner des droits

    $matricule = $Ligne.Matricule
    $groupes = (getGroups -matricule $matricule) -split(",")
    $nom = $Ligne.Nom
    $prenom = $Ligne.Prenom
    $code = $Ligne.Code
    $cheminPersonnel = "E:\_S1_PERSO\$matricule"

  
    New-ADUser -Name $matricule `
           -SamAccountName $matricule `
           -UserPrincipalName "$matricule@$nomDNS" `
           -Path $chemin `
           -GivenName $prenom `
           -Surname $nom `
           -DisplayName "$prenom $nom - $code"  `
           -Description "Mon nom est $nom et mon pr√©nom est $prenom" `
           -AccountPassword $mdp `
           -PasswordNeverExpires $true `
           -Enabled $true

    Add-ADPrincipalGroupMembership -Identity $matricules `
                                 -MemberOf $groupes

    New-Item -Path $cheminPersonnel `
        -ItemType Directory

    icacls.exe $cheminPersonnel /grant $matricule":(OI)(CI)(M)"

    Set-ADUser -Identity $matricule `
               -HomeDrive "P:" `
               -HomeDirectory $cheminPersonnel




}


Function getGroups {
    Param(
        [string]$matricule
    )
    $emp = "EMPLOYES,"
    $gest = "GESTIONNAIRES,"
    $allGroups = "EMPLOYES_ET_GESTIONNAIRES,"
   
    if ($matricule -ge 10000 -and $matricule -lt 20000)
    {
        if($matricule -eq 10000) {
            $allGroups = $allGroups + $gest + "GPROGRAMMEURS_PYTHON_GEST"
        }
        else {
            $allGroups = $allGroups + $emp + "PROGRAMMEURS_PYTHON_EMP"
        }
    }
    elseif ($matricule -ge 20000 -and $matricule -lt 30000) {
        if($matricule -eq 20000) {
            $allGroups = $allGroups + $gest + "PROGRAMMEURS_ANDROID_GEST"
        }
        else {
            $allGroups = $allGroups + $emp + "PROGRAMMEURS_ANDROID_EMP"
        }
    }
    elseif ($matricule -ge 30000 -and $matricule -lt 40000) {
        if($matricule -eq 30000) {
            $allGroups = $allGroups + $gest + "TECHNICIENS_DU_RESEAU_GEST"
        }
        else {
            $allGroups = $allGroups + $emp + "TECHNICIENS_DU_RESEAU_EMP"
        }
    }
    elseif ($matricule -ge 40000 -and $matricule -lt 50000) {
        if($matricule -eq 40000) {
            $allGroups = $allGroups + $gest + "CONCEPTEURS_WEB_GEST"
        }
        else {
            $allGroups = $allGroups + $emp + "CONCEPTEURS_WEB_EMP"
        }
    }
    elseif ($matricule -ge 50000 -and $matricule -lt 60000) {
        if($matricule -eq 50000) {
            $allGroups = $allGroups + $gest + "TESTEURS_DE_LOGICIELS_PYTHON_GEST"
        }
        else {
            $allGroups = $allGroups + $emp + "TESTEURS_DE_LOGICIELS_PYTHON_EMP"
        }
    }
    elseif ($matricule -ge 60000 -and $matricule -lt 70000) {
        if($matricule -eq 60000) {
            $allGroups = $allGroups + $gest + "TESTEURS_DE_LOGICIELS_ANDROID_GEST"
        }
        else {
            $allGroups = $allGroups + $emp + "TESTEURS_DE_LOGICIELS_ANDROID_EMP"
        }
    }
    else{
        throw "matricule invalide"
    }

    return $allGroups
}




# Call the function with a specific matricule value
#$result = getGroupes -matricule 10000

# Output the result
#Write-Host $chemin

    
